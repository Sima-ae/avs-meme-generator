{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/pro/Desktop/REPOS%20CURSOR/avs-meme-generator/src/app/api/upload-meme/route.ts"],"sourcesContent":["import { sql } from '@vercel/postgres';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { writeFile } from 'fs/promises';\nimport { join } from 'path';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    const title = formData.get('title') as string;\n    const userId = formData.get('userId') as string;\n\n    if (!file) {\n      return NextResponse.json({ success: false, error: 'No file provided' }, { status: 400 });\n    }\n\n    // Generate unique filename\n    const timestamp = Date.now();\n    const filename = `meme_${timestamp}_${file.name}`;\n    const filepath = join(process.cwd(), 'public', 'images', 'uploads', filename);\n    const publicUrl = `/images/uploads/${filename}`;\n\n    // Save file to disk\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    await writeFile(filepath, buffer);\n\n    // Generate random position for prikbord\n    const x = Math.floor(Math.random() * 300 + 50);\n    const y = Math.floor(Math.random() * 200 + 50);\n\n    // Save to database\n    const { rows } = await sql`\n      INSERT INTO prikbord_memes (user_id, image_url, title, position_x, position_y)\n      VALUES (${parseInt(userId)}, ${publicUrl}, ${title || 'Generated Meme'}, ${x}, ${y})\n      RETURNING id, image_url, title, position_x, position_y, user_id\n    `;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: rows[0].id,\n        imageUrl: rows[0].image_url,\n        title: rows[0].title,\n        x: rows[0].position_x,\n        y: rows[0].position_y,\n        userId: rows[0].user_id\n      }\n    });\n\n  } catch (error) {\n    console.error('Error uploading meme:', error);\n    return NextResponse.json({ success: false, error: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,SAAS,SAAS,GAAG,CAAC;QAE5B,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxF;QAEA,2BAA2B;QAC3B,MAAM,YAAY,KAAK,GAAG;QAC1B,MAAM,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,WAAW,IAAA,yGAAI,EAAC,QAAQ,GAAG,IAAI,UAAU,UAAU,WAAW;QACpE,MAAM,YAAY,CAAC,gBAAgB,EAAE,UAAU;QAE/C,oBAAoB;QACpB,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAC3B,MAAM,IAAA,kIAAS,EAAC,UAAU;QAE1B,wCAAwC;QACxC,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM;QAC3C,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM;QAE3C,mBAAmB;QACnB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,0LAAG,CAAC;;cAEjB,EAAE,SAAS,QAAQ,EAAE,EAAE,UAAU,EAAE,EAAE,SAAS,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;;IAErF,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE;gBACd,UAAU,IAAI,CAAC,EAAE,CAAC,SAAS;gBAC3B,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK;gBACpB,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU;gBACrB,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU;gBACrB,QAAQ,IAAI,CAAC,EAAE,CAAC,OAAO;YACzB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}