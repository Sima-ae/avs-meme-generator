{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/pro/Desktop/REPOS%20CURSOR/avs-meme-generator/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { sql } from '@vercel/postgres';\nimport bcrypt from 'bcryptjs';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.log('Auth: Missing credentials');\n          return null;\n        }\n\n        console.log('Auth: Attempting login for:', credentials.email);\n\n        // Retry mechanism for database connection issues\n        let retries = 3;\n        while (retries > 0) {\n          try {\n            const { rows } = await sql`\n              SELECT id, email, name, password_hash, role, is_active \n              FROM users \n              WHERE email = ${credentials.email} AND is_active = true\n            `;\n\n            console.log('Auth: Database query result:', rows.length, 'rows found');\n\n            if (rows.length === 0) {\n              console.log('Auth: No user found with email:', credentials.email);\n              return null;\n            }\n\n            const user = rows[0];\n            console.log('Auth: User found:', user.email, user.role);\n            \n            const isPasswordValid = await bcrypt.compare(credentials.password, user.password_hash);\n            console.log('Auth: Password valid:', isPasswordValid);\n\n            if (!isPasswordValid) {\n              console.log('Auth: Invalid password for:', credentials.email);\n              return null;\n            }\n\n            // Update last login\n            try {\n              await sql`\n                UPDATE users \n                SET last_login = CURRENT_TIMESTAMP \n                WHERE id = ${user.id}\n              `;\n              console.log('Auth: Last login updated for:', user.email);\n            } catch (updateError) {\n              console.error('Auth: Error updating last login:', updateError);\n              // Don't fail the login for this error\n            }\n\n            const authResult = {\n              id: user.id.toString(),\n              email: user.email,\n              name: user.name,\n              role: user.role,\n            };\n            \n            console.log('Auth: Login successful for:', user.email);\n            return authResult;\n          } catch (error) {\n            console.error(`Auth error for ${credentials.email} (retry ${4-retries}):`, error);\n            retries--;\n            if (retries > 0) {\n              console.log(`Auth: Retrying in 100ms... (${retries} retries left)`);\n              await new Promise(resolve => setTimeout(resolve, 100));\n            } else {\n              console.error('Auth: All retries failed for:', credentials.email);\n              return null;\n            }\n          }\n        }\n        \n        return null;\n      }\n    })\n  ],\n  session: {\n    strategy: 'jwt',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role;\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/auth/signin',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AACA;;;;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,GAAG,CAAC;oBACZ,OAAO;gBACT;gBAEA,QAAQ,GAAG,CAAC,+BAA+B,YAAY,KAAK;gBAE5D,iDAAiD;gBACjD,IAAI,UAAU;gBACd,MAAO,UAAU,EAAG;oBAClB,IAAI;wBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,0LAAG,CAAC;;;4BAGX,EAAE,YAAY,KAAK,CAAC;YACpC,CAAC;wBAED,QAAQ,GAAG,CAAC,gCAAgC,KAAK,MAAM,EAAE;wBAEzD,IAAI,KAAK,MAAM,KAAK,GAAG;4BACrB,QAAQ,GAAG,CAAC,mCAAmC,YAAY,KAAK;4BAChE,OAAO;wBACT;wBAEA,MAAM,OAAO,IAAI,CAAC,EAAE;wBACpB,QAAQ,GAAG,CAAC,qBAAqB,KAAK,KAAK,EAAE,KAAK,IAAI;wBAEtD,MAAM,kBAAkB,MAAM,8IAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,aAAa;wBACrF,QAAQ,GAAG,CAAC,yBAAyB;wBAErC,IAAI,CAAC,iBAAiB;4BACpB,QAAQ,GAAG,CAAC,+BAA+B,YAAY,KAAK;4BAC5D,OAAO;wBACT;wBAEA,oBAAoB;wBACpB,IAAI;4BACF,MAAM,0LAAG,CAAC;;;2BAGG,EAAE,KAAK,EAAE,CAAC;cACvB,CAAC;4BACD,QAAQ,GAAG,CAAC,iCAAiC,KAAK,KAAK;wBACzD,EAAE,OAAO,aAAa;4BACpB,QAAQ,KAAK,CAAC,oCAAoC;wBAClD,sCAAsC;wBACxC;wBAEA,MAAM,aAAa;4BACjB,IAAI,KAAK,EAAE,CAAC,QAAQ;4BACpB,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,MAAM,KAAK,IAAI;wBACjB;wBAEA,QAAQ,GAAG,CAAC,+BAA+B,KAAK,KAAK;wBACrD,OAAO;oBACT,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,CAAC,eAAe,EAAE,YAAY,KAAK,CAAC,QAAQ,EAAE,IAAE,QAAQ,EAAE,CAAC,EAAE;wBAC3E;wBACA,IAAI,UAAU,GAAG;4BACf,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,QAAQ,cAAc,CAAC;4BAClE,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;wBACnD,OAAO;4BACL,QAAQ,KAAK,CAAC,iCAAiC,YAAY,KAAK;4BAChE,OAAO;wBACT;oBACF;gBACF;gBAEA,OAAO;YACT;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/pro/Desktop/REPOS%20CURSOR/avs-meme-generator/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport { authOptions } from '@/lib/auth';\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,mIAAW","debugId":null}}]
}