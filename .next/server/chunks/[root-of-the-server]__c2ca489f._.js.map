{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///Users/pro/Desktop/REPOS%20CURSOR/avs-meme-generator/src/app/api/admin/users/route.ts"],"sourcesContent":["import { sql } from '@vercel/postgres';\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n  try {\n    const { rows } = await sql`\n      SELECT id, email, name, role, created_at, last_login, is_active \n      FROM users \n      ORDER BY created_at DESC\n    `;\n    \n    return NextResponse.json({ success: true, data: rows });\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return NextResponse.json({ success: false, error: error.message }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('id');\n    \n    if (!userId) {\n      return NextResponse.json({ success: false, error: 'User ID required' }, { status: 400 });\n    }\n    \n    await sql`DELETE FROM users WHERE id = ${parseInt(userId)}`;\n    \n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    return NextResponse.json({ success: false, error: error.message }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: Request) {\n  try {\n    const { userId, isActive } = await request.json();\n    \n    if (!userId || typeof isActive !== 'boolean') {\n      return NextResponse.json({ success: false, error: 'Invalid parameters' }, { status: 400 });\n    }\n    \n    await sql`UPDATE users SET is_active = ${isActive} WHERE id = ${parseInt(userId)}`;\n    \n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error updating user status:', error);\n    return NextResponse.json({ success: false, error: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,0LAAG,CAAC;;;;IAI3B,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAK;IACvD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF;AAEO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACX,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxF;QAEA,MAAM,0LAAG,CAAC,6BAA6B,EAAE,SAAS,QAAQ,CAAC;QAE3D,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE/C,IAAI,CAAC,UAAU,OAAO,aAAa,WAAW;YAC5C,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,MAAM,0LAAG,CAAC,6BAA6B,EAAE,SAAS,YAAY,EAAE,SAAS,QAAQ,CAAC;QAElF,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}